3.
SELECT Movie_Title, Movie_Year, Movie_Cost
FROM Movie
WHERE Movie_Title LIKE "%hope%";

4.
SELECT Movie_Title, Movie_Year, Movie_Genre
FROM Movie
WHERE Movie_Genre LIKE "ACTION";

5.
SELECT Movie_Num, Movie_Title, Movie_Cost
FROM Movie
WHERE Movie_Cost > 40;

6.
SELECT Movie_Num, Movie_Title, Movie_Cost, Movie_Genre
FROM Movie
WHERE Movie_Cost < 50 AND Movie_Genre LIKE "ACTION" OR Movie_Genre LIKE "COMEDY";

7.
SELECT Movie_Num, CONCAT(Movie_Title,', (',Movie_Year,') ',Movie_Genre) AS Movie_Description
FROM Movie;

8.
SELECT Movie_Genre, COUNT(Movie_Genre) AS Number_Of_Movies
FROM Movie
GROUP BY Movie_Genre;

9.
SELECT Avg(Movie_Cost) 
AS AverageMovieCost 
FROM Movie

10.
SELECT Movie_Genre, AVG(Movie_Genre) AS Average_Cost
FROM Movie
GROUP BY Movie_Genre;

11.
SELECT Movie.Movie_Title, Movie.Movie_Genre,  Price.Price_Description, Price.Price_RENTFEE
FROM Movie
INNER JOIN Price ON Movie.Price_Code = Price.Price_Code;

12.
SELECT Movie.Movie_Genre, AVG(price.Price_Rentfee)
FROM Movie
INNER JOIN price ON Movie.PRICE_CODE = Price.PRICE_CODE
GROUP BY Movie_Genre;

13.
SELECT Movie.Movie_Title, Movie.Movie_Year, ROUND( Movie.Movie_Cost / Price.Price_Rentfee, 2 ) 
FROM Movie
INNER JOIN Price ON Movie.Price_Code = Price.Price_code;

14.
SELECT Movie_Title, Movie_Year
FROM Movie
WHERE Price_Code LIKE '%';

15.
SELECT Movie_Title, Movie_Year, Movie_Cost
FROM Movie
WHERE Movie_Cost > 44.99 AND Movie_Cost < 49.99;

16.
SELECT Movie.Movie_Title, Movie.Movie_Year, Price.Price_Description, Price.Price_RentFee, Movie.Movie_Genre
FROM Price
INNER JOIN Movie ON Price.Price_Code = Movie.Price_Code
WHERE Movie.Movie_Genre =  "FAMILY"
OR Movie.Movie_Genre =  "COMEDY"
OR Movie.Movie_Genre =  "DRAMA";

17.
SELECT Min(Mem_Balance) AS Minimum_Balance, Max(Mem_Balance) AS Maxmimum_Balance, AVG(Mem_Balance) AS Average_Balance
FROM Membership;

18.
SELECT CONCAT(Mem_Fname,' ',Mem_Lname) AS Membership_Name, CONCAT(Mem_Street,', ',Mem_City,', ',Mem_State,', ',Mem_Zip) AS Membership_Address
FROM Membership;

19.
SELECT RENTAL.RENT_NUM, RENT_DATE, VIDEO.VID_NUM, MOVIE_TITLE, DETAIL_DUEDATE, DETAIL_RETURNDATE
FROM RENTAL, DETAILRENTAL, VIDEO, MOVIE
WHERE RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM AND DETAILRENTAL.VID_NUM = VIDEO.VID_NUM AND VIDEO.MOVIE_NUM = MOVIE.MOVIE_NUM ORDER BY RENTAL.RENT_NUM, MOVIE_TITLE;

20.
SELECT RENTAL.RENT_NUM, RENT_DATE, VIDEO.VID_NUM, MOVIE_TITLE, DATEDIFF(DETAIL_DUEDATE, DETAIL_RETURNDATE) 
FROM RENTAL, DETAILRENTAL, VIDEO, MOVIE
WHERE RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM
AND DETAILRENTAL.VID_NUM = VIDEO.VID_NUM
AND VIDEO.MOVIE_NUM = MOVIE.MOVIE_NUM
ORDER BY RENTAL.RENT_NUM, MOVIE_TITLE

21.
SELECT RENTAL.RENT_NUM, RENT_DATE, MOVIE_TITLE, DETAIL_FEE FROM RENTAL, DETAILRENTAL, VIDEO, MOVIE WHERE RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM AND DETAILRENTAL.VID_NUM = VIDEO.VID_NUM AND VIDEO.MOVIE_NUM = MOVIE.MOVIE_NUM AND DETAIL_RETURNDATE <= DETAIL_DUEDATE;

22.
SELECT MEMBERSHIP.MEM_NUM, MEM_LNAME, MEM_FNAME, SUM(DETAILRENTAL.DETAIL_FEE) AS "Rental Fee Revenue" FROM MEMBERSHIP, RENTAL, DETAILRENTAL WHERE MEMBERSHIP.MEM_NUM = RENTAL.MEM_NUM AND RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM GROUP BY MEMBERSHIP.MEM_NUM, MEM_LNAME, MEM_FNAME;

23.
SELECT MOVIE_NUM, M.MOVIE_GENRE, AVGCOST AS "Average Cost", MOVIE_COST, (MOVIE_COST â€“ AVGCOST)/AVGCOST * 100 AS "Percent Difference" FROM MOVIE M, (SELECT MOVIE_GENRE, AVG(MOVIE_COST) AS AVGCOST FROM MOVIE GROUP BY MOVIE_GENRE) S WHERE M.MOVIE_GENRE = S.MOVIE_GENRE

24.
ALTER TABLE Detail_Rental
ADD Detail_DaysLate INT(3);

25.
ALTER TABLE VIDEO ADD VID_STATUS VARCHAR(4) DEFAULT 'IN' NOT NULL CHECK (VID_STATUS IN ('IN', 'OUT', 'LOST'))

26.
UPDATE VIDEO SET VID_STATUS = 'OUT' WHERE VID_NUM IN (SELECT VID_NUM FROM DETAILRENTAL WHERE DETAIL_RETURNDATE IS NULL);

27.
ALTER TABLE PRICE ADD PRICE_RENTDAYS NUMBER(2,0) DEFAULT 3 NOT NULL;

28.
UPDATE PRICE SET PRICE_RENTDAYS = 5 WHERE PRICE_CODE IN (1, 3); UPDATE PRICE SET PRICE_RENTDAYS = 7 WHERE PRICE_CODE = 4;

29.
CREATE OR REPLACE TRIGGER TRG_LATE_RETURN BEFORE UPDATE OF DETAIL_RETURNDATE, DETAIL_DUEDATE ON DETAILRENTAL FOR EACH ROW BEGIN IF :NEW.DETAIL_RETURNDATE IS NULL THEN :NEW.DETAIL_DAYSLATE := NULL; ELSIF Trunc(:NEW.DETAIL_RETURNDATE) <= Trunc(:NEW.DETAIL_DUEDATE) OR (Trunc(:NEW.DETAIL_RETURNDATE) = Trunc(:NEW.DETAIL_DUEDATE) + 1 AND To_CHAR(:NEW.DETAIL_RETURNDATE, 'HH24:MI:SS') <= '12:00:00') THEN :NEW.DETAIL_DAYSLATE := 0; ELSE :NEW.DETAIL_DAYSLATE := Trunc(:NEW.DETAIL_RETURNDATE) - Trunc(:NEW.DETAIL_DUEDATE);

30.
CREATE OR REPLACE TRIGGER TRG_MEM_BALANCE AFTER UPDATE OF DETAIL_DUEDATE, DETAIL_RETURNDATE ON DETAILRENTAL FOR EACH ROW DECLARE PRIOR_LATEFEE NUMBER; NEW_LATEFEE NUMBER; UPDATE_AMOUNT NUMBER; RENTAL_MEMBER RENTAL.MEM_NUM%TYPE; BEGIN PRIOR_LATEFEE := :OLD.DETAIL_DAYSLATE * :OLD.DETAIL_DAILYLATEFEE; IF PRIOR_LATEFEE IS NULL THEN PRIOR_LATEFEE := 0; END IF; NEW_LATEFEE := :NEW.DETAIL_DAYSLATE * :NEW.DETAIL_DAILYLATEFEE; IF NEW_LATEFEE IS NULL THEN NEW_LATEFEE := 0; END IF; UPDATE_AMOUNT := NEW_LATEFEE - PRIOR_LATEFEE;

31.









